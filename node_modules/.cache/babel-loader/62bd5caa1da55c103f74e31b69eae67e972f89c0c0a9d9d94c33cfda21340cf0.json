{"ast":null,"code":"var _jsxFileName = \"/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js\",\n  _s = $RefreshSig$();\nimport './Cell.css';\nimport { useState, useEffect } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell({\n  rows,\n  mines\n}) {\n  _s();\n  const initialGrid = Array(rows).fill(null).map(() => Array(rows).fill(''));\n  const [grid, setGrid] = useState(initialGrid);\n  useEffect((initialGrid, rows, mines) => {\n    const randomizeGrid = () => {\n      const gridCopy = initialGrid.map(row => row.slice());\n      const numXs = Math.floor(Math.random() * mines);\n      for (let i = 0; i < numXs; i++) {\n        const row = Math.floor(Math.random() * rows);\n        const col = Math.floor(Math.random() * rows);\n        gridCopy[row][col] = 'ðŸ’£';\n      }\n      return gridCopy;\n    };\n    setGrid(randomizeGrid());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell_wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: cell\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(Cell, \"J0+gerf9jMWTEmgmtidfBxyaYVI=\");\n_c = Cell;\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Cell","rows","mines","_s","initialGrid","Array","fill","map","grid","setGrid","randomizeGrid","gridCopy","row","slice","numXs","Math","floor","random","i","col","className","children","rowIndex","cell","colIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js"],"sourcesContent":["import './Cell.css';\nimport { useState, useEffect } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\n\nfunction Cell({ rows, mines }) {\n  const initialGrid = Array(rows).fill(null).map(() => Array(rows).fill(''));\n\n\n  const [grid, setGrid] = useState(initialGrid);\n  useEffect((initialGrid, rows, mines) => {\n    const randomizeGrid = () => {\n      const gridCopy = initialGrid.map(row => row.slice());\n      const numXs = Math.floor(Math.random() * mines);\n\n      for (let i = 0; i < numXs; i++) {\n        const row = Math.floor(Math.random() * rows);\n        const col = Math.floor(Math.random() * rows);\n        gridCopy[row][col] = 'ðŸ’£';\n      }\n\n      return gridCopy;\n    };\n    setGrid(randomizeGrid());\n  }, []);\n\n  return (\n    <div className=\"cell_wrapper\">\n      <div>\n        <div>\n          {grid.map((row, rowIndex) =>\n            row.map((cell, colIndex) => (\n              <div key={`${rowIndex}-${colIndex}`}\n              >\n                {cell}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n\n    </div>\n  );\n}\n\nexport default Cell;\n"],"mappings":";;AAAA,OAAO,YAAY;AACnB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,IAAIA,CAAC;EAAEC,IAAI;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAC7B,MAAMC,WAAW,GAAGC,KAAK,CAACJ,IAAI,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAACJ,IAAI,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC,CAAC;EAG1E,MAAM,CAACE,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAACQ,WAAW,CAAC;EAC7CP,SAAS,CAAC,CAACO,WAAW,EAAEH,IAAI,EAAEC,KAAK,KAAK;IACtC,MAAMQ,aAAa,GAAGA,CAAA,KAAM;MAC1B,MAAMC,QAAQ,GAAGP,WAAW,CAACG,GAAG,CAACK,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC;MACpD,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGf,KAAK,CAAC;MAE/C,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;QAC9B,MAAMN,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGhB,IAAI,CAAC;QAC5C,MAAMkB,GAAG,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGhB,IAAI,CAAC;QAC5CU,QAAQ,CAACC,GAAG,CAAC,CAACO,GAAG,CAAC,GAAG,IAAI;MAC3B;MAEA,OAAOR,QAAQ;IACjB,CAAC;IACDF,OAAO,CAACC,aAAa,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAKqB,SAAS,EAAC,cAAc;IAAAC,QAAA,eAC3BtB,OAAA;MAAAsB,QAAA,eACEtB,OAAA;QAAAsB,QAAA,EACGb,IAAI,CAACD,GAAG,CAAC,CAACK,GAAG,EAAEU,QAAQ,KACtBV,GAAG,CAACL,GAAG,CAAC,CAACgB,IAAI,EAAEC,QAAQ,kBACrBzB,OAAA;UAAAsB,QAAA,EAEGE;QAAI,GAFG,GAAGD,QAAQ,IAAIE,QAAQ,EAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAG9B,CACN,CACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGH,CAAC;AAEV;AAACzB,EAAA,CAvCQH,IAAI;AAAA6B,EAAA,GAAJ7B,IAAI;AAyCb,eAAeA,IAAI;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}