{"ast":null,"code":"var _jsxFileName = \"/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js\",\n  _s = $RefreshSig$();\nimport './Cell.css';\nimport { useState, useEffect } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell({\n  mines\n}) {\n  _s();\n  const [buttonText, setButtonText] = useState(null);\n\n  // const handleClick = () => {\n  //   setButtonText('1');\n  // };\n\n  const matrix = Array.from({\n    length: rows\n  }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: Array.from({\n      length: rows\n    }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n      mines: mines\n    }, colIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this))\n  }, rowIndex, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this));\n  const randomizeGrid = () => {\n    const gridCopy = initialGrid.map(row => row.slice()); // Create a copy of the grid\n    const numXs = Math.floor(Math.random() * 81); // Randomly decide how many Xs (up to 81)\n\n    for (let i = 0; i < numXs; i++) {\n      const row = Math.floor(Math.random() * 9); // Random row index\n      const col = Math.floor(Math.random() * 9); // Random column index\n      gridCopy[row][col] = 'X';\n    }\n    return gridCopy;\n  };\n  useEffect(() => {\n    setButtonText(randomizeGrid());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell_wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: randomizeGrid,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(Cell, \"8Q9lkn3Lf/rBR2Uku+HH0+MB2kY=\");\n_c = Cell;\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Cell","mines","_s","buttonText","setButtonText","matrix","Array","from","length","rows","map","_","rowIndex","className","children","colIndex","fileName","_jsxFileName","lineNumber","columnNumber","randomizeGrid","gridCopy","initialGrid","row","slice","numXs","Math","floor","random","i","col","onClick","_c","$RefreshReg$"],"sources":["/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js"],"sourcesContent":["import './Cell.css';\nimport { useState, useEffect } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\n\nfunction Cell({mines}) {\n  const [buttonText, setButtonText] = useState(null);\n\n  // const handleClick = () => {\n  //   setButtonText('1');\n  // };\n\n  const matrix = Array.from({ length: rows }).map((_, rowIndex) => (\n    <div key={rowIndex} className=\"row\">\n      {Array.from({ length: rows }).map((_, colIndex) => (\n        <Cell key={colIndex} mines={mines} />\n      ))}\n    </div>\n  ));\n  const randomizeGrid = () => {\n    const gridCopy = initialGrid.map(row => row.slice());  // Create a copy of the grid\n    const numXs = Math.floor(Math.random() * (81)); // Randomly decide how many Xs (up to 81)\n\n    for (let i = 0; i < numXs; i++) {\n      const row = Math.floor(Math.random() * 9); // Random row index\n      const col = Math.floor(Math.random() * 9); // Random column index\n      gridCopy[row][col] = 'X';\n    }\n\n    return gridCopy;\n  };\n\n  useEffect(() => {\n    setButtonText(randomizeGrid());\n  }, []);\n\n  return (\n    <div className=\"cell_wrapper\">\n      <button onClick={randomizeGrid}>\n        {buttonText}\n      </button>\n\n      \n    </div>\n  );\n}\n\nexport default Cell;\n"],"mappings":";;AAAA,OAAO,YAAY;AACnB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,IAAIA,CAAC;EAACC;AAAK,CAAC,EAAE;EAAAC,EAAA;EACrB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;;EAElD;EACA;EACA;;EAEA,MAAMS,MAAM,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEC;EAAK,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,QAAQ,kBAC1Db,OAAA;IAAoBc,SAAS,EAAC,KAAK;IAAAC,QAAA,EAChCR,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEC;IAAK,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEI,QAAQ,kBAC5ChB,OAAA,CAACC,IAAI;MAAgBC,KAAK,EAAEA;IAAM,GAAvBc,QAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CACrC;EAAC,GAHMP,QAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIb,CACN,CAAC;EACF,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,QAAQ,GAAGC,WAAW,CAACZ,GAAG,CAACa,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE;IACvD,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAI,EAAG,CAAC,CAAC,CAAC;;IAEhD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;MAC9B,MAAMN,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC3C,MAAME,GAAG,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC3CP,QAAQ,CAACE,GAAG,CAAC,CAACO,GAAG,CAAC,GAAG,GAAG;IAC1B;IAEA,OAAOT,QAAQ;EACjB,CAAC;EAEDxB,SAAS,CAAC,MAAM;IACdO,aAAa,CAACgB,aAAa,CAAC,CAAC,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACErB,OAAA;IAAKc,SAAS,EAAC,cAAc;IAAAC,QAAA,eAC3Bf,OAAA;MAAQgC,OAAO,EAAEX,aAAc;MAAAN,QAAA,EAC5BX;IAAU;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGN,CAAC;AAEV;AAACjB,EAAA,CAxCQF,IAAI;AAAAgC,EAAA,GAAJhC,IAAI;AA0Cb,eAAeA,IAAI;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}