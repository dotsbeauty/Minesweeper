{"ast":null,"code":"var _jsxFileName = \"/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Board.js\",\n  _s = $RefreshSig$();\nimport './Board.css';\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell.js';\n\n// TODO: here, I will decide number of mines and number of cells required\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  rows,\n  selectedLevel,\n  mines\n}) {\n  _s();\n  const [timer, setTimer] = useState(0);\n  const initialGrid = Array(rows).fill(null).map(() => Array(rows).fill(''));\n  const [grid, setGrid] = useState(initialGrid);\n  useEffect((initialGrid, rows, mines) => {\n    const randomizeGrid = () => {\n      //           const gridCopy = Array.from({ length: Math.floor(Math.random() * rows)}, () =>\n      //           Array.from({ length: Math.floor(Math.random() * rows) }, () => (\"ðŸ’£\")))\n      //           console.log(gridCopy)\n\n      //           return gridCopy;\n      const gridCopy = Array;\n    };\n    setGrid(randomizeGrid());\n  }, []);\n  useEffect(() => {\n    let interval;\n    if (selectedLevel !== null) {\n      setTimer(0);\n      interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer + 1);\n      }, 1000);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [selectedLevel]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board_wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board_data\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Grid: \", rows, \" x \", rows]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time: \", timer, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"flags: \", mines]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `grid grid-${rows}`,\n      children: grid.flat().map((value, index) => /*#__PURE__*/_jsxDEV(Cell, {\n        value: value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"kPjKVKHEUyCTDYUpOp6fiBe6+ao=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","Cell","jsxDEV","_jsxDEV","Board","rows","selectedLevel","mines","_s","timer","setTimer","initialGrid","Array","fill","map","grid","setGrid","randomizeGrid","gridCopy","interval","setInterval","prevTimer","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","flat","value","index","_c","$RefreshReg$"],"sources":["/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Board.js"],"sourcesContent":["import './Board.css';\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell.js'\n\n// TODO: here, I will decide number of mines and number of cells required\n\nfunction Board({ rows, selectedLevel, mines }) {\n  const [timer, setTimer] = useState(0);\n  const initialGrid = Array(rows).fill(null).map(() => Array(rows).fill(''));\n  const [grid, setGrid] = useState(initialGrid);\n  useEffect((initialGrid, rows, mines)=> {\n    const randomizeGrid = () => {\n  //           const gridCopy = Array.from({ length: Math.floor(Math.random() * rows)}, () =>\n  //           Array.from({ length: Math.floor(Math.random() * rows) }, () => (\"ðŸ’£\")))\n  //           console.log(gridCopy)\n      \n  //           return gridCopy;\n  const gridCopy = Array\n          };\n          setGrid(randomizeGrid());\n  }, []);\n  \n\n  useEffect(() => {\n    let interval;\n    if (selectedLevel !== null) {\n      setTimer(0);\n      interval = setInterval(() => {\n        setTimer((prevTimer) => prevTimer + 1);\n      }, 1000);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [selectedLevel]);\n\n  return (\n    <div className=\"board_wrapper\">\n      <div className='board_data'>\n        <div>\n          <p>Grid: {rows} x {rows}</p>\n        </div>\n        <div>\n          <p>Time: {timer}s</p>\n        </div>\n        <div>\n          <p>flags: {mines}</p>\n        </div>\n      </div>\n      <div className={`grid grid-${rows}`}>\n      {grid.flat().map((value, index) => (\n        <Cell key={index} value={value} />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}