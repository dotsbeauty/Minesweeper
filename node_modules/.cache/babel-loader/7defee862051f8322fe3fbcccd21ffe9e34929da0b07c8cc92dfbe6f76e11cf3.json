{"ast":null,"code":"var _jsxFileName = \"/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js\",\n  _s = $RefreshSig$();\nimport './Cell.css';\nimport { useState, useEffect } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell({\n  rows,\n  mines\n}) {\n  _s();\n  const [buttonText, setButtonText] = useState(null);\n\n  // const handleClick = () => {\n  //   setButtonText('1');\n  // };\n\n  // const initialGrid = Array.from({ length: rows }).map((_, rowIndex) => (\n  //   <div key={rowIndex} className=\"row\">\n  //     {Array.from({ length: rows }).map((_, colIndex) => (\n  //       <Cell key={colIndex} mines={mines} />\n  //     ))}\n  //   </div>\n  // ));\n  const initialGrid = Array(rows).fill(null).map(() => Array(rows).fill(''));\n  const randomizeGrid = () => {\n    const gridCopy = initialGrid.map(row => row.slice()); // Create a copy of the grid\n    const numXs = Math.floor(Math.random() * mines); // Randomly decide how many Xs (up to 81)\n\n    for (let i = 0; i < numXs; i++) {\n      const row = Math.floor(Math.random() * rows); // Random row index\n      const col = Math.floor(Math.random() * rows); // Random column index\n      gridCopy[row][col] = 'ðŸ’£';\n    }\n    return gridCopy;\n  };\n  const [grid, setGrid] = useState(initialGrid);\n  useEffect(() => {\n    // Randomize grid when component loads\n    setGrid(randomizeGrid());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell_wrapper\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(Cell, \"MK5zwXgrba3WDaEz1U+suM1eTQU=\");\n_c = Cell;\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Cell","rows","mines","_s","buttonText","setButtonText","initialGrid","Array","fill","map","randomizeGrid","gridCopy","row","slice","numXs","Math","floor","random","i","col","grid","setGrid","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js"],"sourcesContent":["import './Cell.css';\nimport { useState, useEffect } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\n\nfunction Cell({rows, mines}) {\n  const [buttonText, setButtonText] = useState(null);\n\n  // const handleClick = () => {\n  //   setButtonText('1');\n  // };\n\n  // const initialGrid = Array.from({ length: rows }).map((_, rowIndex) => (\n  //   <div key={rowIndex} className=\"row\">\n  //     {Array.from({ length: rows }).map((_, colIndex) => (\n  //       <Cell key={colIndex} mines={mines} />\n  //     ))}\n  //   </div>\n  // ));\n  const initialGrid = Array(rows).fill(null).map(() => Array(rows).fill(''));\n  const randomizeGrid = () => {\n    const gridCopy = initialGrid.map(row => row.slice());  // Create a copy of the grid\n    const numXs = Math.floor(Math.random() * mines); // Randomly decide how many Xs (up to 81)\n\n    for (let i = 0; i < numXs; i++) {\n      const row = Math.floor(Math.random() * rows); // Random row index\n      const col = Math.floor(Math.random() * rows); // Random column index\n      gridCopy[row][col] = 'ðŸ’£';\n    }\n\n    return gridCopy;\n  };\n\n  const [grid, setGrid] = useState(initialGrid);\n  useEffect(() => {\n    // Randomize grid when component loads\n    setGrid(randomizeGrid());\n  }, []);\n\n  return (\n    <div className=\"cell_wrapper\">\n      {/* <button onClick={randomizeGrid}>\n        {buttonText}\n      </button> */}\n\n      \n    </div>\n  );\n}\n\nexport default Cell;\n"],"mappings":";;AAAA,OAAO,YAAY;AACnB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,IAAIA,CAAC;EAACC,IAAI;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAElD;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMU,WAAW,GAAGC,KAAK,CAACN,IAAI,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAACN,IAAI,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC,CAAC;EAC1E,MAAME,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,QAAQ,GAAGL,WAAW,CAACG,GAAG,CAACG,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE;IACvD,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGf,KAAK,CAAC,CAAC,CAAC;;IAEjD,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;MAC9B,MAAMN,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGhB,IAAI,CAAC,CAAC,CAAC;MAC9C,MAAMkB,GAAG,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGhB,IAAI,CAAC,CAAC,CAAC;MAC9CU,QAAQ,CAACC,GAAG,CAAC,CAACO,GAAG,CAAC,GAAG,IAAI;IAC3B;IAEA,OAAOR,QAAQ;EACjB,CAAC;EAED,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGzB,QAAQ,CAACU,WAAW,CAAC;EAC7CT,SAAS,CAAC,MAAM;IACd;IACAwB,OAAO,CAACX,aAAa,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAKuB,SAAS,EAAC;EAAc;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAMxB,CAAC;AAEV;AAACvB,EAAA,CA3CQH,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AA6Cb,eAAeA,IAAI;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}