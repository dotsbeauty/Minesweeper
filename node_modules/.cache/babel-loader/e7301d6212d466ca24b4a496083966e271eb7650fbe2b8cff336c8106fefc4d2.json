{"ast":null,"code":"var _jsxFileName = \"/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js\",\n  _s = $RefreshSig$();\nimport './Cell.css';\nimport { useState, useEffect } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell({\n  rows,\n  mines\n}) {\n  _s();\n  // const [buttonText, setButtonText] = useState(null);\n\n  // const handleClick = () => {\n  //   setButtonText('1');\n  // };\n\n  // const initialGrid = Array.from({ length: rows }).map((_, rowIndex) => (\n  //   <div key={rowIndex} className=\"row\">\n  //     {Array.from({ length: rows }).map((_, colIndex) => (\n  //       <Cell key={colIndex} mines={mines} />\n  //     ))}\n  //   </div>\n  // ));\n  const initialGrid = Array(rows).fill(null).map(() => Array(rows).fill(''));\n  const [grid, setGrid] = useState(initialGrid);\n  useEffect(() => {\n    // Randomize grid when component loads\n    setGrid(randomizeGrid());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell_wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Random X Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(9, 40px)',\n          gap: '5px'\n        },\n        children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '40px',\n            height: '40px',\n            textAlign: 'center',\n            lineHeight: '40px',\n            border: '1px solid #ccc',\n            backgroundColor: cell === 'X' ? 'lightblue' : 'white',\n            fontWeight: 'bold'\n          },\n          children: cell\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(Cell, \"J0+gerf9jMWTEmgmtidfBxyaYVI=\");\n_c = Cell;\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Cell","rows","mines","_s","initialGrid","Array","fill","map","grid","setGrid","randomizeGrid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","gap","row","rowIndex","cell","colIndex","width","height","textAlign","lineHeight","border","backgroundColor","fontWeight","_c","$RefreshReg$"],"sources":["/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js"],"sourcesContent":["import './Cell.css';\nimport { useState, useEffect } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\n\nfunction Cell({rows, mines}) {\n  // const [buttonText, setButtonText] = useState(null);\n\n  // const handleClick = () => {\n  //   setButtonText('1');\n  // };\n\n  // const initialGrid = Array.from({ length: rows }).map((_, rowIndex) => (\n  //   <div key={rowIndex} className=\"row\">\n  //     {Array.from({ length: rows }).map((_, colIndex) => (\n  //       <Cell key={colIndex} mines={mines} />\n  //     ))}\n  //   </div>\n  // ));\n  const initialGrid = Array(rows).fill(null).map(() => Array(rows).fill(''));\n  \n\n  const [grid, setGrid] = useState(initialGrid);\n  useEffect(() => {\n    // Randomize grid when component loads\n    setGrid(randomizeGrid());\n  }, []);\n\n  return (\n    <div className=\"cell_wrapper\">\n      {/* <button onClick={randomizeGrid}>\n        {buttonText}\n      </button> */}\n\n<div>\n      <h1>Random X Grid</h1>\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(9, 40px)', gap: '5px' }}>\n        {grid.map((row, rowIndex) =>\n          row.map((cell, colIndex) => (\n            <div\n              key={`${rowIndex}-${colIndex}`}\n              style={{\n                width: '40px',\n                height: '40px',\n                textAlign: 'center',\n                lineHeight: '40px',\n                border: '1px solid #ccc',\n                backgroundColor: cell === 'X' ? 'lightblue' : 'white',\n                fontWeight: 'bold',\n              }}\n            >\n              {cell}\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n\n      \n    </div>\n  );\n}\n\nexport default Cell;\n"],"mappings":";;AAAA,OAAO,YAAY;AACnB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,IAAIA,CAAC;EAACC,IAAI;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC3B;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,WAAW,GAAGC,KAAK,CAACJ,IAAI,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAACJ,IAAI,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC,CAAC;EAG1E,MAAM,CAACE,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAACQ,WAAW,CAAC;EAC7CP,SAAS,CAAC,MAAM;IACd;IACAY,OAAO,CAACC,aAAa,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAKY,SAAS,EAAC,cAAc;IAAAC,QAAA,eAKjCb,OAAA;MAAAa,QAAA,gBACMb,OAAA;QAAAa,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBjB,OAAA;QAAKkB,KAAK,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,mBAAmB,EAAE,iBAAiB;UAAEC,GAAG,EAAE;QAAM,CAAE;QAAAR,QAAA,EACjFJ,IAAI,CAACD,GAAG,CAAC,CAACc,GAAG,EAAEC,QAAQ,KACtBD,GAAG,CAACd,GAAG,CAAC,CAACgB,IAAI,EAAEC,QAAQ,kBACrBzB,OAAA;UAEEkB,KAAK,EAAE;YACLQ,KAAK,EAAE,MAAM;YACbC,MAAM,EAAE,MAAM;YACdC,SAAS,EAAE,QAAQ;YACnBC,UAAU,EAAE,MAAM;YAClBC,MAAM,EAAE,gBAAgB;YACxBC,eAAe,EAAEP,IAAI,KAAK,GAAG,GAAG,WAAW,GAAG,OAAO;YACrDQ,UAAU,EAAE;UACd,CAAE;UAAAnB,QAAA,EAEDW;QAAI,GAXA,GAAGD,QAAQ,IAAIE,QAAQ,EAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAY3B,CACN,CACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGD,CAAC;AAEV;AAACb,EAAA,CAxDQH,IAAI;AAAAgC,EAAA,GAAJhC,IAAI;AA0Db,eAAeA,IAAI;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}