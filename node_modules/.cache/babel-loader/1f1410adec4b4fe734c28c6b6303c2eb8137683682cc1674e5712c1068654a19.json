{"ast":null,"code":"var _jsxFileName = \"/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js\",\n  _s = $RefreshSig$();\nimport './Cell.css';\nimport { useState } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell({\n  mines\n}) {\n  _s();\n  const [buttonText, setButtonText] = useState(null);\n  const handleClick = () => {\n    setButtonText('1');\n  };\n  const randomizeGrid = () => {\n    const gridCopy = initialGrid.map(row => row.slice()); // Create a copy of the grid\n    const numXs = Math.floor(Math.random() * 81); // Randomly decide how many Xs (up to 81)\n\n    for (let i = 0; i < numXs; i++) {\n      const row = Math.floor(Math.random() * 9); // Random row index\n      const col = Math.floor(Math.random() * 9); // Random column index\n      gridCopy[row][col] = 'X';\n    }\n    return gridCopy;\n  };\n  useEffect(() => {\n    // Randomize grid when component loads\n    setGrid(randomizeGrid());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell_wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(Cell, \"8Q9lkn3Lf/rBR2Uku+HH0+MB2kY=\");\n_c = Cell;\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Cell","mines","_s","buttonText","setButtonText","handleClick","randomizeGrid","gridCopy","initialGrid","map","row","slice","numXs","Math","floor","random","i","col","useEffect","setGrid","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js"],"sourcesContent":["import './Cell.css';\nimport { useState } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\n\nfunction Cell({mines}) {\n  const [buttonText, setButtonText] = useState(null);\n\n  const handleClick = () => {\n    setButtonText('1');\n  };\n  const randomizeGrid = () => {\n    const gridCopy = initialGrid.map(row => row.slice());  // Create a copy of the grid\n    const numXs = Math.floor(Math.random() * (81)); // Randomly decide how many Xs (up to 81)\n\n    for (let i = 0; i < numXs; i++) {\n      const row = Math.floor(Math.random() * 9); // Random row index\n      const col = Math.floor(Math.random() * 9); // Random column index\n      gridCopy[row][col] = 'X';\n    }\n\n    return gridCopy;\n  };\n\n  useEffect(() => {\n    // Randomize grid when component loads\n    setGrid(randomizeGrid());\n  }, []);\n\n  return (\n    <div className=\"cell_wrapper\">\n      <button onClick={handleClick}>\n        {buttonText}\n      </button>\n    </div>\n  );\n}\n\nexport default Cell;\n"],"mappings":";;AAAA,OAAO,YAAY;AACnB,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,IAAIA,CAAC;EAACC;AAAK,CAAC,EAAE;EAAAC,EAAA;EACrB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxBD,aAAa,CAAC,GAAG,CAAC;EACpB,CAAC;EACD,MAAME,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,QAAQ,GAAGC,WAAW,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE;IACvD,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAI,EAAG,CAAC,CAAC,CAAC;;IAEhD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;MAC9B,MAAMN,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC3C,MAAME,GAAG,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC3CR,QAAQ,CAACG,GAAG,CAAC,CAACO,GAAG,CAAC,GAAG,GAAG;IAC1B;IAEA,OAAOV,QAAQ;EACjB,CAAC;EAEDW,SAAS,CAAC,MAAM;IACd;IACAC,OAAO,CAACb,aAAa,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAKqB,SAAS,EAAC,cAAc;IAAAC,QAAA,eAC3BtB,OAAA;MAAQuB,OAAO,EAAEjB,WAAY;MAAAgB,QAAA,EAC1BlB;IAAU;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACxB,EAAA,CA/BQF,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AAiCb,eAAeA,IAAI;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}