{"ast":null,"code":"var _jsxFileName = \"/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Game.js\",\n  _s = $RefreshSig$();\nimport './Game.css';\nimport { useState } from 'react';\nimport Board from './Board.js';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction checkWinCondition(grid, mines) {\n  let revealedCount = 0;\n  let correctFlags = 0;\n  let totalCells = grid.length * grid[0].length;\n  grid.forEach(row => {\n    row.forEach(cell => {\n      if (cell.isRevealed) revealedCount++;\n      if (cell.isFlagged && cell.isBomb) correctFlags++;\n    });\n  });\n  return revealedCount + mines === totalCells || correctFlags === mines;\n}\nfunction Game({\n  selectedLevel\n}) {\n  _s();\n  const navigate = useNavigate();\n  const handleNavigate = () => {\n    navigate(\"/\");\n  };\n  const rows = selectedLevel === \"beginner\" ? 9 : selectedLevel === \"intermediate\" ? 16 : 24;\n  const mines = rows === 9 ? 10 : rows === 16 ? 40 : 99;\n  const [gameStatus, setGameStatus] = useState('playing'); // 'playing', 'won', or 'lost'\n  const [grid, setGrid] = useState(null);\n  const handleGameUpdate = updatedGrid => {\n    setGrid(updatedGrid);\n    if (gameStatus === \"playing\") {\n      if (checkWinCondition(updatedGrid, mines)) {\n        setGameStatus(\"won\");\n        return;\n      }\n      const bombHit = updatedGrid.some(row => row.some(cell => cell.isRevealed && cell.isBomb));\n      if (bombHit) {\n        setGameStatus(\"lost\");\n      }\n    }\n  };\n  const resetGame = () => {\n    setGameStatus('playing');\n    setGrid(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game_wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_container\",\n      children: [gameStatus === 'won' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game_status won\",\n        children: [\"\\uD83C\\uDF89 You Won! \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), gameStatus === 'lost' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game_status lost\",\n        children: [\"\\uD83D\\uDCA5 You Lost! \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), gameStatus === 'playing' && /*#__PURE__*/_jsxDEV(Board, {\n      rows: rows,\n      selectedLevel: selectedLevel,\n      mines: mines,\n      grid: grid,\n      setGrid: handleGameUpdate,\n      setGameStatus: setGameStatus,\n      gameStatus: gameStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNavigate,\n      children: \"Go to App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"CTXVrBlng/bSmjCuvqtZAzz3nQo=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useState","Board","useNavigate","jsxDEV","_jsxDEV","checkWinCondition","grid","mines","revealedCount","correctFlags","totalCells","length","forEach","row","cell","isRevealed","isFlagged","isBomb","Game","selectedLevel","_s","navigate","handleNavigate","rows","gameStatus","setGameStatus","setGrid","handleGameUpdate","updatedGrid","bombHit","some","resetGame","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Game.js"],"sourcesContent":["import './Game.css';\nimport { useState } from 'react';\nimport Board from './Board.js';\nimport { useNavigate } from \"react-router-dom\";\n\nfunction checkWinCondition(grid, mines) {\n  let revealedCount = 0;\n  let correctFlags = 0;\n  let totalCells = grid.length * grid[0].length;\n\n  grid.forEach(row => {\n    row.forEach(cell => {\n      if (cell.isRevealed) revealedCount++;\n      if (cell.isFlagged && cell.isBomb) correctFlags++;\n    });\n  });\n\n  return revealedCount + mines === totalCells || correctFlags === mines;\n}\n\n\nfunction Game({ selectedLevel }) {\n  const navigate = useNavigate();\n\n  const handleNavigate = () => {\n    navigate(\"/\");\n  };\n  const rows = selectedLevel === \"beginner\" ? 9 : selectedLevel === \"intermediate\" ? 16 : 24;\n  const mines = rows === 9 ? 10 : rows === 16 ? 40 : 99;\n\n  const [gameStatus, setGameStatus] = useState('playing'); // 'playing', 'won', or 'lost'\n  const [grid, setGrid] = useState(null);\n\n  const handleGameUpdate = (updatedGrid) => {\n    setGrid(updatedGrid);\n\n    if (gameStatus === \"playing\") {\n      if (checkWinCondition(updatedGrid, mines)) {\n        setGameStatus(\"won\");\n        return;\n      }\n\n      const bombHit = updatedGrid.some(row =>\n        row.some(cell => cell.isRevealed && cell.isBomb)\n      );\n      if (bombHit) {\n        setGameStatus(\"lost\");\n      }\n    }\n  };\n\n  const resetGame = () => {\n    setGameStatus('playing');\n    setGrid(null);\n  };\n\n  return (\n    <div className=\"game_wrapper\">\n      {/* {gameStatus !== 'playing' ? :} */}\n      <div className=\"game_container\">\n      {gameStatus === 'won' && (\n        <div className=\"game_status won\">\n          ðŸŽ‰ You Won! <button onClick={resetGame}>Play Again</button>\n        </div>\n      )}\n      {gameStatus === 'lost' && (\n        <div className=\"game_status lost\">\n          ðŸ’¥ You Lost! <button onClick={resetGame}>Try Again</button>\n        </div>\n      )}\n      </div>\n\n\n      {gameStatus === 'playing' && ( <Board\n        rows={rows}\n        selectedLevel={selectedLevel}\n        mines={mines}\n        grid={grid}\n        setGrid={handleGameUpdate}\n        setGameStatus={setGameStatus}\n        gameStatus={gameStatus}\n      />)}\n\n<button onClick={handleNavigate}>Go to App</button>\n\n    </div>\n  );\n}\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}