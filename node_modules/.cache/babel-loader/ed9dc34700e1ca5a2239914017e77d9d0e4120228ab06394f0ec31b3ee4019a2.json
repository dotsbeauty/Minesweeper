{"ast":null,"code":"var _jsxFileName = \"/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Board.js\",\n  _s = $RefreshSig$();\nimport './Board.css';\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell.js';\n\n// TODO: here, I will decide number of mines and number of cells required\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  rows,\n  selectedLevel,\n  mines\n}) {\n  _s();\n  console.log(\"from box: \", rows, mines);\n  const [timer, setTimer] = useState(0);\n  const [buttonText, setButtonText] = useState(null);\n\n  // const handleClick = () => {\n  //   setButtonText('1');\n  // };\n  const randomizeGrid = () => {\n    const gridCopy = initialGrid.map(row => row.slice()); // Create a copy of the grid\n    const numXs = Math.floor(Math.random() * 81); // Randomly decide how many Xs (up to 81)\n\n    for (let i = 0; i < numXs; i++) {\n      const row = Math.floor(Math.random() * 9); // Random row index\n      const col = Math.floor(Math.random() * 9); // Random column index\n      gridCopy[row][col] = 'X';\n    }\n    return gridCopy;\n  };\n  useEffect(() => {\n    setButtonText(randomizeGrid());\n  }, []);\n  useEffect(() => {\n    let interval;\n    if (selectedLevel !== null) {\n      setTimer(0);\n      interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer + 1);\n      }, 1000);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [selectedLevel]);\n  const matrix = Array.from({\n    length: rows\n  }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: Array.from({\n      length: rows\n    }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n      mines: mines\n    }, colIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this))\n  }, rowIndex, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board_wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board_data\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Grid: \", rows, \" x \", rows]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time: \", timer, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"flags: \", mines]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `grid grid-${rows}`,\n      children: matrix\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"iO+uyl8ZlXV0KF3Py74foew9CN8=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","Cell","jsxDEV","_jsxDEV","Board","rows","selectedLevel","mines","_s","console","log","timer","setTimer","buttonText","setButtonText","randomizeGrid","gridCopy","initialGrid","map","row","slice","numXs","Math","floor","random","i","col","interval","setInterval","prevTimer","clearInterval","matrix","Array","from","length","_","rowIndex","className","children","colIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Board.js"],"sourcesContent":["import './Board.css';\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell.js'\n\n// TODO: here, I will decide number of mines and number of cells required\n\nfunction Board({ rows, selectedLevel, mines }) {\n  console.log(\"from box: \", rows, mines)\n  const [timer, setTimer] = useState(0);\n\n  const [buttonText, setButtonText] = useState(null);\n\n  // const handleClick = () => {\n  //   setButtonText('1');\n  // };\n  const randomizeGrid = () => {\n    const gridCopy = initialGrid.map(row => row.slice());  // Create a copy of the grid\n    const numXs = Math.floor(Math.random() * (81)); // Randomly decide how many Xs (up to 81)\n\n    for (let i = 0; i < numXs; i++) {\n      const row = Math.floor(Math.random() * 9); // Random row index\n      const col = Math.floor(Math.random() * 9); // Random column index\n      gridCopy[row][col] = 'X';\n    }\n\n    return gridCopy;\n  };\n\n  useEffect(() => {\n    setButtonText(randomizeGrid());\n  }, []);\n\n  useEffect(() => {\n    let interval;\n\n    if (selectedLevel !== null) {\n      setTimer(0);\n      interval = setInterval(() => {\n        setTimer((prevTimer) => prevTimer + 1);\n      }, 1000);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [selectedLevel]);\n\n  const matrix = Array.from({ length: rows }).map((_, rowIndex) => (\n    <div key={rowIndex} className=\"row\">\n      {Array.from({ length: rows }).map((_, colIndex) => (\n        <Cell key={colIndex} mines={mines} />\n      ))}\n    </div>\n  ));\n\n  return (\n    <div className=\"board_wrapper\">\n      <div className='board_data'>\n        <div>\n          <p>Grid: {rows} x {rows}</p>\n        </div>\n        <div>\n          <p>Time: {timer}s</p>\n        </div>\n        <div>\n          <p>flags: {mines}</p>\n        </div>\n      </div>\n      <div className={`grid grid-${rows}`}>\n        {matrix}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}