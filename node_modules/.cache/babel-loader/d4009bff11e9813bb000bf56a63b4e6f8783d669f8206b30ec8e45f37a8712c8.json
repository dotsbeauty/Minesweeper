{"ast":null,"code":"var _jsxFileName = \"/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js\",\n  _s = $RefreshSig$();\nimport './Cell.css';\nimport { useState, useEffect } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell({\n  rows,\n  mines\n}) {\n  _s();\n  const initialGrid = Array(rows).fill(null).map(() => Array(rows).fill(''));\n  const [grid, setGrid] = useState(initialGrid);\n  useEffect((initialGrid, rows, mines) => {\n    const randomizeGrid = () => {\n      const gridCopy = initialGrid.map(row => row.slice());\n      const numXs = Math.floor(Math.random() * mines);\n      for (let i = 0; i < numXs; i++) {\n        const row = Math.floor(Math.random() * rows);\n        const col = Math.floor(Math.random() * rows);\n        gridCopy[row][col] = 'ðŸ’£';\n      }\n      console.log(gridCopy);\n      return gridCopy;\n    };\n    setGrid(randomizeGrid());\n  }, []);\n  console.log(initialGrid);\n  return (\n    /*#__PURE__*/\n    // <div className=\"cell_wrapper\">\n    //   {/* <div>\n    //     <div>\n    //       {grid.map((row, rowIndex) =>\n    //         row.map((cell, colIndex) => (\n    //           <div key={`${rowIndex}-${colIndex}`}>\n    //             {cell}\n    //           </div>\n    //         ))\n    //       )}\n    //     </div> */}\n    //   </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Random X Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(9, 40px)',\n          gap: '5px'\n        },\n        children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '40px',\n            height: '40px',\n            textAlign: 'center',\n            lineHeight: '40px',\n            border: '1px solid #ccc',\n            backgroundColor: cell === 'X' ? 'lightblue' : 'white',\n            fontWeight: 'bold'\n          },\n          children: cell\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Cell, \"J0+gerf9jMWTEmgmtidfBxyaYVI=\");\n_c = Cell;\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Cell","rows","mines","_s","initialGrid","Array","fill","map","grid","setGrid","randomizeGrid","gridCopy","row","slice","numXs","Math","floor","random","i","col","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","gap","rowIndex","cell","colIndex","width","height","textAlign","lineHeight","border","backgroundColor","fontWeight","_c","$RefreshReg$"],"sources":["/Users/drishti/Projects/Github/Games/Minesweeper/minesweeper/src/Cell.js"],"sourcesContent":["import './Cell.css';\nimport { useState, useEffect } from 'react';\n\n// TODO: Here I will, I will travel the cell and Count nearby bomb and check whether the cell is open or not\n\nfunction Cell({ rows, mines }) {\n  const initialGrid = Array(rows).fill(null).map(() => Array(rows).fill(''));\n\n\n  const [grid, setGrid] = useState(initialGrid);\n  useEffect((initialGrid, rows, mines) => {\n    const randomizeGrid = () => {\n      const gridCopy = initialGrid.map(row => row.slice());\n      const numXs = Math.floor(Math.random() * mines);\n\n      for (let i = 0; i < numXs; i++) {\n        const row = Math.floor(Math.random() * rows);\n        const col = Math.floor(Math.random() * rows);\n        gridCopy[row][col] = 'ðŸ’£';\n      }\n      console.log(gridCopy)\n\n      return gridCopy;\n    };\n    setGrid(randomizeGrid());\n  }, []);\n  console.log(initialGrid)\n\n  return (\n    // <div className=\"cell_wrapper\">\n    //   {/* <div>\n    //     <div>\n    //       {grid.map((row, rowIndex) =>\n    //         row.map((cell, colIndex) => (\n    //           <div key={`${rowIndex}-${colIndex}`}>\n    //             {cell}\n    //           </div>\n    //         ))\n    //       )}\n    //     </div> */}\n    //   </div>\n\n\n    // </div>\n    <div>\n      <h1>Random X Grid</h1>\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(9, 40px)', gap: '5px' }}>\n        {grid.map((row, rowIndex) =>\n          row.map((cell, colIndex) => (\n            <div\n              key={`${rowIndex}-${colIndex}`}\n              style={{\n                width: '40px',\n                height: '40px',\n                textAlign: 'center',\n                lineHeight: '40px',\n                border: '1px solid #ccc',\n                backgroundColor: cell === 'X' ? 'lightblue' : 'white',\n                fontWeight: 'bold',\n              }}\n            >\n              {cell}\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Cell;\n"],"mappings":";;AAAA,OAAO,YAAY;AACnB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,IAAIA,CAAC;EAAEC,IAAI;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAC7B,MAAMC,WAAW,GAAGC,KAAK,CAACJ,IAAI,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAACJ,IAAI,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC,CAAC;EAG1E,MAAM,CAACE,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAACQ,WAAW,CAAC;EAC7CP,SAAS,CAAC,CAACO,WAAW,EAAEH,IAAI,EAAEC,KAAK,KAAK;IACtC,MAAMQ,aAAa,GAAGA,CAAA,KAAM;MAC1B,MAAMC,QAAQ,GAAGP,WAAW,CAACG,GAAG,CAACK,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC;MACpD,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGf,KAAK,CAAC;MAE/C,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;QAC9B,MAAMN,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGhB,IAAI,CAAC;QAC5C,MAAMkB,GAAG,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGhB,IAAI,CAAC;QAC5CU,QAAQ,CAACC,GAAG,CAAC,CAACO,GAAG,CAAC,GAAG,IAAI;MAC3B;MACAC,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;MAErB,OAAOA,QAAQ;IACjB,CAAC;IACDF,OAAO,CAACC,aAAa,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EACNU,OAAO,CAACC,GAAG,CAACjB,WAAW,CAAC;EAExB;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAGA;IACAL,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtB3B,OAAA;QAAK4B,KAAK,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,mBAAmB,EAAE,iBAAiB;UAAEC,GAAG,EAAE;QAAM,CAAE;QAAAR,QAAA,EACjFd,IAAI,CAACD,GAAG,CAAC,CAACK,GAAG,EAAEmB,QAAQ,KACtBnB,GAAG,CAACL,GAAG,CAAC,CAACyB,IAAI,EAAEC,QAAQ,kBACrBlC,OAAA;UAEE4B,KAAK,EAAE;YACLO,KAAK,EAAE,MAAM;YACbC,MAAM,EAAE,MAAM;YACdC,SAAS,EAAE,QAAQ;YACnBC,UAAU,EAAE,MAAM;YAClBC,MAAM,EAAE,gBAAgB;YACxBC,eAAe,EAAEP,IAAI,KAAK,GAAG,GAAG,WAAW,GAAG,OAAO;YACrDQ,UAAU,EAAE;UACd,CAAE;UAAAlB,QAAA,EAEDU;QAAI,GAXA,GAAGD,QAAQ,IAAIE,QAAQ,EAAE;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAY3B,CACN,CACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;AAEV;AAACvB,EAAA,CA/DQH,IAAI;AAAAyC,EAAA,GAAJzC,IAAI;AAiEb,eAAeA,IAAI;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}